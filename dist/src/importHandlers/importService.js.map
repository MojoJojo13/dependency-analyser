{"version":3,"file":"importService.js","sourceRoot":"","sources":["../../../src/importHandlers/importService.ts"],"names":[],"mappings":"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","sourcesContent":["import * as ts from \"typescript\";\r\nimport * as path from \"path\";\r\nimport {DependencyAnalyser} from \"../main/dependencyAnalyser\";\r\nimport {ImportCount} from \"../presentation/importCount\";\r\nimport {UsageCount} from \"../presentation/usageCount\";\r\nimport {ImportDeclaration} from \"./importDeclaration\";\r\nimport {Declaration} from \"./declaration\";\r\nimport {printChildren} from \"../util/util\";\r\n\r\ntype Declarations =\r\n    ts.ClassDeclaration\r\n    | ts.VariableDeclaration\r\n    | ts.EnumDeclaration\r\n    | ts.FunctionDeclaration\r\n    | ts.ParameterDeclaration\r\n    | ts.ArrowFunction;\r\n\r\n/**\r\n * Class to scan the AST tree of a TypeScript file and count dependency usages.\r\n */\r\nexport class ImportScanner {\r\n    get dependencyAnalyser(): DependencyAnalyser {\r\n        return this._dependencyAnalyser;\r\n    }\r\n\r\n    set dependencyAnalyser(value: DependencyAnalyser) {\r\n        this._dependencyAnalyser = value;\r\n    }\r\n\r\n    get fileName(): string {\r\n        return this._fileName;\r\n    }\r\n\r\n    set fileName(value: string) {\r\n        this._fileName = value;\r\n    }\r\n\r\n    get source(): ts.SourceFile {\r\n        return this._source;\r\n    }\r\n\r\n    set source(value: ts.SourceFile) {\r\n        this._source = value;\r\n    }\r\n\r\n    get importMap(): Map<string, ImportDeclaration> {\r\n        return this._importMap;\r\n    }\r\n\r\n    set importMap(value: Map<string, ImportDeclaration>) {\r\n        this._importMap = value;\r\n    }\r\n\r\n    private _dependencyAnalyser: DependencyAnalyser;\r\n    private _fileName: string;\r\n    private _source: ts.SourceFile;\r\n    private _importMap = new Map<string, ImportDeclaration>();\r\n    private _importOverrideMapArray: Map<string, Declaration>[] = [];\r\n\r\n    constructor(dependencyAnalyser: DependencyAnalyser, fileName: string, source: ts.SourceFile) {\r\n        this.dependencyAnalyser = dependencyAnalyser;\r\n        this.fileName = fileName;\r\n        this.source = source;\r\n\r\n        // printChildren(source); // DEBUG\r\n        // console.log(\"-------------------\");\r\n        this.scanSource(source);\r\n    }\r\n\r\n    /**\r\n     * Goes through the AST tree created by TypeScript and handles the different nodes.\r\n     */\r\n    scanSource(node: ts.Node) {\r\n\r\n        node.forEachChild(child => {\r\n            switch (child.kind) {\r\n                case ts.SyntaxKind.ImportDeclaration:\r\n                    this.handleImportDeclaration(child as ts.ImportDeclaration);\r\n                    break;\r\n\r\n                case ts.SyntaxKind.VariableDeclarationList:\r\n                    this.handleVariableDeclarationList(child as ts.VariableDeclarationList);\r\n                    this.scanSource(child);\r\n                    break;\r\n\r\n                case ts.SyntaxKind.ClassDeclaration:\r\n                case ts.SyntaxKind.EnumDeclaration:\r\n                    this.handleDeclaration(child as Declarations);\r\n                    this.scanSource(child);\r\n                    break;\r\n\r\n                case ts.SyntaxKind.ArrowFunction:\r\n                case ts.SyntaxKind.FunctionDeclaration:\r\n                case ts.SyntaxKind.FunctionExpression:\r\n                    this.handleFunctionDeclaration(child as ts.FunctionDeclaration | ts.ArrowFunction | ts.FunctionExpression);\r\n                    break;\r\n\r\n                case ts.SyntaxKind.Block:\r\n                    this.handleBlock(child);\r\n                    break;\r\n\r\n                case ts.SyntaxKind.EndOfFileToken: // Ignore\r\n                    break;\r\n\r\n                case ts.SyntaxKind.Identifier:\r\n                    const identifier = child as ts.Identifier;\r\n                    const name = identifier.escapedText.toString();\r\n                    const importDeclaration = this.findImportDeclaration(name);\r\n\r\n                    if (importDeclaration) {\r\n                        const usageCount = new UsageCount(this.fileName, importDeclaration, identifier);\r\n                        this.dependencyAnalyser.countService.addUsageCount(usageCount);\r\n                    }\r\n\r\n                    break;\r\n\r\n                default:\r\n                    this.scanSource(child);\r\n                    break;\r\n            }\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Saves ImportDeclarations in an array to lookup when used.\r\n     */\r\n    private handleImportDeclaration(node: ts.ImportDeclaration) {\r\n        const importDeclaration = new ImportDeclaration(node);\r\n        const importSpecifiers = importDeclaration.getImportSpecifiers();\r\n        const moduleSpecifier = importDeclaration.getModuleSpecifier();\r\n\r\n        try {\r\n            const options = {paths: [this.dependencyAnalyser.options.nodeModulesDir]};\r\n            const modulePath = require.resolve(importDeclaration.getModuleSpecifier(), options);\r\n            const isNodeModule = !path.isAbsolute(modulePath);\r\n\r\n            // filter out custom modules\r\n            if (RegExp('^(\\\\.\\\\.|\\\\.)(\\\\/)').test(moduleSpecifier)) {\r\n                return;\r\n            }\r\n\r\n            const importCount = new ImportCount(this.fileName, importDeclaration, this.source, isNodeModule);\r\n            this.dependencyAnalyser.countService.addImportCount(importCount);\r\n        } catch (err) {\r\n            // Module could not be resolved, so skip it\r\n            return;\r\n        }\r\n\r\n        importSpecifiers.forEach((value: string) => {\r\n            this.importMap.set(value, importDeclaration);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates a new scope around the node.\r\n     */\r\n    private handleBlock(node: ts.Node) {\r\n        this.handleBlockStart();\r\n        this.scanSource(node);\r\n        this.handleBlockEnd();\r\n    }\r\n\r\n    /**\r\n     * Opens a scope by creating a new map for declarations.\r\n     */\r\n    private handleBlockStart() {\r\n        this._importOverrideMapArray.push(new Map<string, Declaration>());\r\n    }\r\n\r\n    /**\r\n     * Closes the last open scope by removing the last map of declarations.\r\n     */\r\n    private handleBlockEnd() {\r\n        this._importOverrideMapArray.pop();\r\n    }\r\n\r\n    /**\r\n     * Iterates through the VariableDeclarationList and handles every declaration.\r\n     */\r\n    private handleVariableDeclarationList(\r\n        variableDeclarationList: ts.VariableDeclarationList,\r\n    ) {\r\n        variableDeclarationList.forEachChild(variableDeclaration => {\r\n            this.handleDeclaration(variableDeclaration as ts.VariableDeclaration);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Saves a declaration into the current scope.\r\n     */\r\n    private handleDeclaration(declaration: Declarations) {\r\n        const name = declaration.name;\r\n\r\n        if (ts.isIdentifier(name)) {\r\n            const nameText = name.escapedText.toString();\r\n\r\n            if (Array.from(this.importMap.keys()).some(value => value === nameText)) {\r\n                const lastElement = this._importOverrideMapArray[this._importOverrideMapArray.length - 1];\r\n                lastElement.set(nameText, new Declaration(declaration));\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Splits FunctionDeclaration in parts to handle the scope\r\n     */\r\n    private handleFunctionDeclaration(functionDeclaration: ts.FunctionDeclaration | ts.ArrowFunction | ts.FunctionExpression) {\r\n\r\n        // only FunctionDeclarations have a name which has to be handled\r\n        if (ts.isFunctionDeclaration(functionDeclaration)) {\r\n            this.handleDeclaration(functionDeclaration);\r\n        }\r\n\r\n        this.handleBlockStart();\r\n\r\n        functionDeclaration.parameters.forEach(parameter => this.handleDeclaration(parameter));\r\n\r\n        if (functionDeclaration.body) {\r\n            this.scanSource(functionDeclaration.body);\r\n        }\r\n\r\n        this.handleBlockEnd();\r\n    }\r\n\r\n    /**\r\n     * Searches and returns the ImportDeclaration. If it's overridden return undefined.\r\n     */\r\n    private findImportDeclaration(name: string): ImportDeclaration | undefined {\r\n        if (this._importOverrideMapArray.some(importOverrideMap => {\r\n            return Array.from(importOverrideMap.keys()).some(importKey => importKey === name);\r\n        })) {\r\n            return undefined;\r\n        }\r\n\r\n        return this.importMap.get(name);\r\n    }\r\n\r\n}"]}