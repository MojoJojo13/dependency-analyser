{"version":3,"file":"dependencyAnalyser.js","sourceRoot":"","sources":["../../../src/main/dependencyAnalyser.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from \"fs\";\r\nimport * as path from \"path\";\r\nimport * as ts from \"typescript\";\r\nimport {ImportScanner} from \"../importHandlers/importService\";\r\nimport {CountService} from \"../presentation/countService\";\r\nimport {Options} from \"../index\";\r\n\r\n/**\r\n * Root controller for this application.\r\n */\r\nexport class DependencyAnalyser {\r\n\r\n    get allFiles(): string[] {\r\n        return this._allFiles;\r\n    }\r\n\r\n    set allFiles(value: string[]) {\r\n        this._allFiles = value;\r\n    }\r\n\r\n    get filesObject(): object {\r\n        return this._filesObject;\r\n    }\r\n\r\n    set filesObject(value: object) {\r\n        this._filesObject = value;\r\n    }\r\n\r\n    get importScannerMap(): Map<string, ImportScanner> {\r\n        return this._importScannerMap;\r\n    }\r\n\r\n    set importScannerMap(value: Map<string, ImportScanner>) {\r\n        this._importScannerMap = value;\r\n    }\r\n\r\n    get countService(): CountService {\r\n        return this._countService;\r\n    }\r\n\r\n    set countService(value: CountService) {\r\n        this._countService = value;\r\n    }\r\n\r\n    get options(): Options {\r\n        return this._options;\r\n    }\r\n\r\n    set options(value: Options) {\r\n        this._options = value;\r\n    }\r\n\r\n    get packageJson(): object {\r\n        return this._packageJson;\r\n    }\r\n\r\n    set packageJson(value: object) {\r\n        this._packageJson = value;\r\n    }\r\n\r\n    private _allFiles: string[];\r\n    private _filesObject: object;\r\n    private _importScannerMap: Map<string, ImportScanner>;\r\n    private _countService: CountService;\r\n    private _options: Options;\r\n    private _packageJson: object;\r\n\r\n    constructor(options: Options) {\r\n        this.options = options;\r\n        this.countService = new CountService(this);\r\n\r\n        // read package.json\r\n        this.packageJson = JSON.parse(fs.readFileSync(path.join(options.rootDir, \"package.json\"), \"utf-8\"));\r\n\r\n        // get all files to scan\r\n        const allFiles = this.getAllFiles(options.scanDir);\r\n        this.allFiles = allFiles.filesArray;\r\n        this.filesObject = allFiles.filesObject;\r\n    }\r\n\r\n    /**\r\n     * Scans the given given directory path and returns an object\r\n     * with all filtered Files as array and as an object tree.\r\n     * @param scanDir Path to a File or Directory to be scanned\r\n     */\r\n    getAllFiles(scanDir: string): { filesArray, filesObject } {\r\n        const options = this.options;\r\n        const filesArray: string[] = [];\r\n        let filesObject;\r\n\r\n        if (fs.existsSync(scanDir)) {\r\n            const lstatSync = fs.lstatSync(scanDir);\r\n\r\n            if (lstatSync.isDirectory()) {\r\n\r\n                filesObject = getAllFilesRek(scanDir);\r\n\r\n            } else if (lstatSync.isFile()) {\r\n\r\n                if (options.fileExtensionFilter.some(value => path.parse(scanDir).ext === value)) {\r\n                    const _filesObject = {};\r\n                    _filesObject[scanDir] = null;\r\n                    return {\"filesArray\": [scanDir], \"filesObject\": _filesObject};\r\n                } else {\r\n                    throw new Error(\"The given file is not a .ts File: \" + scanDir);\r\n                }\r\n\r\n            } else {\r\n                throw new Error(\"Scan path is not a file nor a directory: \" + scanDir);\r\n            }\r\n        }\r\n\r\n        return {\"filesArray\": filesArray, \"filesObject\": filesObject};\r\n\r\n        function getAllFilesRek(directory: string): object {\r\n            const directoryItems = fs.readdirSync(directory);\r\n            const filesObj = {};\r\n\r\n            if (options.exclude.some(value => directory.match(value))) return null;\r\n\r\n            directoryItems.forEach(value => {\r\n                const fileName = path.join(directory, value);\r\n                const lstatSync = fs.lstatSync(fileName);\r\n\r\n                if (lstatSync.isDirectory()) {\r\n                    const children = getAllFilesRek(fileName);\r\n                    filesObj[fileName] = children ? {children: children} : {};\r\n                } else if (lstatSync.isFile()) {\r\n                    if (options.fileExtensionFilter.some(fileExtension => path.parse(fileName).ext === fileExtension)) {\r\n                        filesObj[fileName] = null;\r\n                        filesArray.push(fileName);\r\n                    }\r\n                }\r\n            });\r\n\r\n            return filesObj;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Scans all found files with ImportScanner\r\n     */\r\n    scanAllFiles(): void {\r\n        this.importScannerMap = new Map<string, ImportScanner>();\r\n\r\n        if (this.allFiles.length === 0) {\r\n            throw new Error(\"No files to scan found.\");\r\n        }\r\n\r\n        this.allFiles.forEach(fileName => {\r\n            const sourceFile = ts.createSourceFile(\r\n                fileName, // fileName\r\n                fs.readFileSync(fileName, 'utf8'), // sourceText\r\n                ts.ScriptTarget.Latest, // languageVersion\r\n            );\r\n\r\n            const importScanner = new ImportScanner(this, fileName, sourceFile);\r\n            this.importScannerMap.set(fileName, importScanner);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @link OutputGenerator#generateHTML\r\n     */\r\n    generateOutput(): void {\r\n        this.countService.outputGenerator.generateHTML();\r\n    }\r\n\r\n}"]}