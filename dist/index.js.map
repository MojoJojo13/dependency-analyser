{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["#!/usr/bin/env node\r\nimport * as fs from \"fs\";\r\nimport * as path from \"path\";\r\nimport * as yargs from \"yargs\";\r\nimport {DependencyAnalyser} from \"./main/dependencyAnalyser\";\r\n\r\nexport interface Options {\r\n    rootDir: string,\r\n    targetDir: string,\r\n    scanDir: string,\r\n    nodeModulesDir: string,\r\n    exclude: string[],\r\n    fileExtensionFilter: string[]\r\n}\r\n\r\nconst NODE_MODULES = \"node_modules\";\r\n\r\nconst options: Options = {\r\n    rootDir: \"\",\r\n    scanDir: \"\",\r\n    targetDir: \"\",\r\n    nodeModulesDir: \"\",\r\n    exclude: [\"\\\\\\\\node_modules$\", \"\\\\\\..*\"],\r\n    fileExtensionFilter: [\".ts\"]\r\n};\r\n\r\nconst argv: { root?, tar?, scan? } = yargs\r\n    .usage(\"Usage: dependency-analyser [options]\")\r\n    .example(\"dependency-analyser --root C:/User/Projects/your_project\", \"\")\r\n    .example(\"dependency-analyser --root C:/User/Projects/your_project --scan C:/User/Projects/your_project/src\", \"\")\r\n    .option('root', {\r\n        alias: 'r',\r\n        type: 'string',\r\n        description: 'Root directory of your project.'\r\n    }).option('scan', {\r\n        alias: 's',\r\n        type: 'string',\r\n        description: 'Directory to scan. (absolute or relative to root)'\r\n    }).option('tar', {\r\n        alias: 't',\r\n        type: 'string',\r\n        description: 'Target directory to put generated files into. (absolute or relative to root)'\r\n    })\r\n    .alias('h', 'help')\r\n    .showHelpOnFail(true)\r\n    .help()\r\n    .argv\r\n\r\n// determine the root directory\r\nif (argv.root) {\r\n    options.rootDir = argv.root;\r\n} else {\r\n    const split = process.argv[1].split(NODE_MODULES);\r\n\r\n    if (split.length < 2) {\r\n        throw new Error(\"Could not find the root folder. Please provide the root path in the arguments.\");\r\n    }\r\n\r\n    options.rootDir = path.normalize(split[0]);\r\n}\r\n\r\n// set node_modules directory\r\noptions.nodeModulesDir = path.join(options.rootDir, NODE_MODULES);\r\n\r\n// check if the determined directory exists\r\nif (!fs.existsSync(options.rootDir)) {\r\n    throw new Error(\"The provided root directory does not exist. \" + options.rootDir);\r\n}\r\n\r\n// determine scan directory or file\r\nif (argv.scan) {\r\n    if (path.isAbsolute(argv.scan)) {\r\n        options.scanDir = argv.scan;\r\n    } else {\r\n        options.scanDir = path.join(options.rootDir, argv.scan);\r\n    }\r\n} else {\r\n    options.scanDir = options.rootDir;\r\n}\r\n\r\n// check if the determined directory exists\r\nif (!fs.existsSync(options.scanDir)) {\r\n    throw new Error(\"The provided directory to scan does not exist. \" + options.scanDir);\r\n}\r\n\r\n// determine target directory\r\nif (argv.tar) {\r\n    options.targetDir = argv.tar;\r\n} else {\r\n    options.targetDir = path.join(options.rootDir, \"dependency-analysis\");\r\n}\r\n\r\nconst dependencyAnalyser = new DependencyAnalyser(options);\r\ndependencyAnalyser.scanAllFiles();\r\ndependencyAnalyser.generateOutput();\r\n"]}