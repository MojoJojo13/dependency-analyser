{"version":3,"file":"declaration.js","sourceRoot":"","sources":["../../src/importHandlers/declaration.ts"],"names":[],"mappings":";;AAAA,iCAAiC;AAEjC,MAAa,WAAW;IA6BpB,YAAY,IAAa;QACrB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACrB,CAAC;IA9BD,IAAI,IAAI;QACJ,OAAO,IAAI,CAAC,KAAK,CAAC;IACtB,CAAC;IAED,IAAI,IAAI,CAAC,KAAc;QACnB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACvB,CAAC;IAED,IAAI,KAAK;QACL,OAAO,IAAI,CAAC,MAAM,CAAC;IACvB,CAAC;IAED,IAAI,KAAK,CAAC,KAAa;QACnB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;IACxB,CAAC;IAED,IAAI,SAAS;QACT,OAAO,IAAI,CAAC,UAAU,CAAC;IAC3B,CAAC;IAED,IAAI,SAAS,CAAC,KAAa;QACvB,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;IAC5B,CAAC;IAUD,OAAO;QACH,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,KAAK,EAAE,CAAC,UAAU,CAAC,cAAc,EAAE;YACjD,aAAa;YACb,MAAM,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC;YAC5D,OAAO,YAAY,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC;SACrD;QAED,OAAO;IACX,CAAC;IAED,OAAO;QACH,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,KAAK,EAAE,CAAC,UAAU,CAAC,cAAc,EAAE;YACjD,OAAO,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC;SAC3D;QAED,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;IAC1B,CAAC;CACJ;AAlDD,kCAkDC","sourcesContent":["import * as ts from \"typescript\";\r\n\r\nexport class Declaration {\r\n    get node(): ts.Node {\r\n        return this._node;\r\n    }\r\n\r\n    set node(value: ts.Node) {\r\n        this._node = value;\r\n    }\r\n\r\n    get alias(): string {\r\n        return this._alias;\r\n    }\r\n\r\n    set alias(value: string) {\r\n        this._alias = value;\r\n    }\r\n\r\n    get reference(): string {\r\n        return this._reference;\r\n    }\r\n\r\n    set reference(value: string) {\r\n        this._reference = value;\r\n    }\r\n\r\n    protected _node: ts.Node;\r\n    private _alias: string;\r\n    private _reference: string;\r\n\r\n    constructor(node: ts.Node) {\r\n        this.node = node;\r\n    }\r\n\r\n    getType() {\r\n        if (this.node.kind === ts.SyntaxKind.FirstStatement) {\r\n            // @ts-ignore\r\n            const declarations = this.node.declarationList.declarations;\r\n            return declarations[declarations.length - 1].type;\r\n        }\r\n\r\n        return;\r\n    }\r\n\r\n    getKind(): ts.SyntaxKind {\r\n        if (this.node.kind === ts.SyntaxKind.FirstStatement) {\r\n            return this.getType() ? this.getType().kind : undefined;\r\n        }\r\n\r\n        return this.node.kind;\r\n    }\r\n}"]}