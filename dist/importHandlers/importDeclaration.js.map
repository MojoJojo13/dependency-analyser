{"version":3,"file":"importDeclaration.js","sourceRoot":"","sources":["../../src/importHandlers/importDeclaration.ts"],"names":[],"mappings":";;AAAA,iCAAiC;AACjC,+CAA0C;AAE1C;;GAEG;AACH,MAAa,iBAAkB,SAAQ,yBAAW;IAE9C,IAAI,IAAI;QACJ,OAAO,IAAI,CAAC,KAA6B,CAAC;IAC9C,CAAC;IAED,IAAI,IAAI,CAAC,KAA2B;QAChC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACvB,CAAC;IAED,IAAI,QAAQ;QACR,OAAO,IAAI,CAAC,SAAS,CAAC;IAC1B,CAAC;IAED,IAAI,QAAQ,CAAC,KAAa;QACtB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;IAC3B,CAAC;IAID,sBAAsB;QAClB,OAAO,IAAI,CAAC,IAAI,CAAC,YAAY;eACtB,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,aAAa;eACpC,EAAE,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC;IACtE,CAAC;IAED,mBAAmB;QACf,MAAM,gBAAgB,GAAa,EAAE,CAAC;QACtC,MAAM,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,YAA+B,CAAC;QAE/D,IAAI,CAAC,YAAY;YAAE,OAAO,EAAE,CAAC;QAE7B,IAAI,YAAY,CAAC,IAAI,EAAE;YACnB,gBAAgB,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,CAAC;SACnE;QAED,IAAI,YAAY,CAAC,aAAa,EAAE;YAC5B,6DAA6D;YAC7D,MAAM,aAAa,GAAG,YAAY,CAAC,aAAuC,CAAC;YAE3E,IAAI,EAAE,CAAC,iBAAiB,CAAC,aAAa,CAAC,EAAE;gBACrC,gBAAgB,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,CAAC;aACpE;iBAAM,IAAI,EAAE,CAAC,cAAc,CAAC,aAAa,CAAC,EAAE;gBACxC,aAAiC,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;aAC1H;SACJ;QAED,OAAO,gBAAgB,CAAC;IAC5B,CAAC;IAED,kBAAkB;QACd,OAAO,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,CAAW,CAAC;IACvD,CAAC;CAEJ;AAtDD,8CAsDC","sourcesContent":["import * as ts from \"typescript\";\r\nimport {Declaration} from \"./declaration\";\r\n\r\n/**\r\n * Class to store information about module imports.\r\n */\r\nexport class ImportDeclaration extends Declaration {\r\n\r\n    get node(): ts.ImportDeclaration {\r\n        return this._node as ts.ImportDeclaration;\r\n    }\r\n\r\n    set node(value: ts.ImportDeclaration) {\r\n        this._node = value;\r\n    }\r\n\r\n    get fileName(): string {\r\n        return this._fileName;\r\n    }\r\n\r\n    set fileName(value: string) {\r\n        this._fileName = value;\r\n    }\r\n\r\n    private _fileName: string;\r\n\r\n    isEntireModuleImported(): boolean {\r\n        return this.node.importClause\r\n            && this.node.importClause.namedBindings\r\n            && ts.isNamespaceImport(this.node.importClause.namedBindings);\r\n    }\r\n\r\n    getImportSpecifiers(): string[] {\r\n        const importSpecifiers: string[] = [];\r\n        const importClause = this.node.importClause as ts.ImportClause;\r\n\r\n        if (!importClause) return [];\r\n\r\n        if (importClause.name) {\r\n            importSpecifiers.push(importClause.name.escapedText.toString());\r\n        }\r\n\r\n        if (importClause.namedBindings) {\r\n            // type NamedImportBindings = NamespaceImport | NamedImports;\r\n            const namedBindings = importClause.namedBindings as ts.NamedImportBindings;\r\n\r\n            if (ts.isNamespaceImport(namedBindings)) {\r\n                importSpecifiers.push(namedBindings.name.escapedText.toString());\r\n            } else if (ts.isNamedImports(namedBindings)) {\r\n                (namedBindings as ts.NamedImports).elements.forEach(value => importSpecifiers.push(value.name.escapedText.toString()));\r\n            }\r\n        }\r\n\r\n        return importSpecifiers;\r\n    }\r\n\r\n    getModuleSpecifier(): string {\r\n        return this.node.moduleSpecifier[\"text\"] as string;\r\n    }\r\n\r\n}"]}