{"version":3,"file":"outputGenerator.js","sourceRoot":"","sources":["../../src/presentation/outputGenerator.ts"],"names":[],"mappings":"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","sourcesContent":["import * as pug from \"pug\";\r\nimport * as getSizes from \"package-size\";\r\nimport * as path from \"path\";\r\nimport * as fs from \"fs\";\r\nimport {CountService} from \"./countService\";\r\nimport {ImportCount} from \"./importCount\";\r\nimport {UsageCount} from \"./usageCount\";\r\n\r\nconst HTML_TEMPLATE_FILES = {\r\n    \"INDEX\": \"templates/html/index.pug\",\r\n    \"MODULE\": \"templates/html/module.pug\",\r\n    \"CODE\": \"templates/html/code.pug\"\r\n};\r\n\r\nconst ASSETS = [\r\n    \"assets\\\\uikit\\\\uikit.min.css\",\r\n    \"assets\\\\uikit\\\\uikit.min.js\",\r\n    \"assets\\\\uikit\\\\uikit-icons.min.js\",\r\n    \"assets\\\\css\\\\custom.css\",\r\n    \"assets\\\\js\\\\run_prettify.js\"\r\n];\r\n\r\nexport class OutputGenerator {\r\n    get countService(): CountService {\r\n        return this._countService;\r\n    }\r\n\r\n    set countService(value: CountService) {\r\n        this._countService = value;\r\n    }\r\n\r\n    private _countService: CountService;\r\n    private date: Date;\r\n\r\n    constructor(countService: CountService) {\r\n        this._countService = countService;\r\n    }\r\n\r\n    /**\r\n     * Creates all HTML files for output.\r\n     */\r\n    generateHTML(): void {\r\n        const dependencyFileNameMap = this._countService.groupByFileName();\r\n        const dependencyNameMap = this._countService.groupByDependencyName();\r\n        const scanDir = this._countService.dependencyAnalyser.options.scanDir;\r\n        const targetDir = this._countService.dependencyAnalyser.options.targetDir;\r\n        const allDependencies: object = this._countService.dependencyAnalyser.packageJson[\"dependencies\"];\r\n        this.date = new Date();\r\n\r\n        this.cleanRootFolder();\r\n        this.createAssets();\r\n\r\n        // create index file\r\n        new Promise<any>(resolve => {\r\n            resolve(this.generateIndex(dependencyNameMap, allDependencies));\r\n        }).then(outputHTML => {\r\n            this.createHtmlFile(path.join(targetDir, \"index.html\"), outputHTML);\r\n        });\r\n\r\n        // create module files\r\n        dependencyNameMap.forEach((importCountArray, dependencyName) => {\r\n            const fileName = path.join(targetDir, \"modules\", dependencyName) + \".html\";\r\n            const content = this.generateModules(dependencyName, importCountArray);\r\n\r\n            this.createHtmlFile(fileName, content);\r\n        });\r\n\r\n        // create code files\r\n        dependencyFileNameMap.forEach((importCountArray, filePath) => {\r\n            let relativePath = path.relative(scanDir, filePath);\r\n            if (relativePath.length === 0) {\r\n                relativePath = path.parse(filePath).base;\r\n            }\r\n            const fileName = path.join(targetDir, \"details\", relativePath) + \".html\";\r\n            const usageCountArray = this._countService.groupUsageByFileName().get(filePath);\r\n\r\n            this.createHtmlFile(fileName, this.generateFileContent(importCountArray, usageCountArray, relativePath));\r\n        });\r\n\r\n    }\r\n\r\n    /**\r\n     * Creates all missing folders of a given path on the file system.\r\n     */\r\n    private createFolder(dirPath: string): void {\r\n        if (!fs.existsSync(dirPath)) {\r\n            fs.mkdirSync(dirPath, {recursive: true});\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates all folders to the target directory. Used to be deleting all\r\n     * content of the folder.\r\n     */\r\n    private cleanRootFolder(): void {\r\n        const tarPath = this._countService.dependencyAnalyser.options.targetDir;\r\n\r\n        if (!fs.existsSync(tarPath)) {\r\n            fs.mkdirSync(tarPath);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a HTML file with given content on the file system.\r\n     */\r\n    private createHtmlFile(sPath: string, content: string): void {\r\n        this.createFolder(path.dirname(sPath));\r\n\r\n        fs.writeFile(sPath, content, (err) => {\r\n            if (err) throw err;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Copies all marked templates to the target directory on the file system.\r\n     */\r\n    private createAssets(): void {\r\n        const targetDir = this._countService.dependencyAnalyser.options.targetDir;\r\n\r\n        ASSETS.forEach(value => {\r\n            const source = path.join(__dirname, value);\r\n            const destination = path.join(targetDir, \"assets\", path.parse(value).base);\r\n            this.createFolder(path.join(targetDir, \"assets\"));\r\n            fs.copyFileSync(source, destination);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates the content of the index file.\r\n     */\r\n    private async generateIndex(dependencies: Map<string, ImportCount[]>, allDependencies: object): Promise<any> {\r\n        // Compile the source code\r\n        const compiledFunction = pug.compileFile(path.join(__dirname, HTML_TEMPLATE_FILES.INDEX));\r\n        const nodeModulesPath = this._countService.dependencyAnalyser.options.nodeModulesDir;\r\n        const dependencyData = [];\r\n        const nodeModulesData = [];\r\n        const chartData = [{\r\n            elementId: \"dependenciesChart\",\r\n            title: \"Dependency Imports\",\r\n            data: []\r\n        }, {\r\n            elementId: \"nodeModulesChart\",\r\n            title: \"Minified Size of Dependency in kB\",\r\n            data: []\r\n        }, {\r\n            elementId: \"customModulesChart\",\r\n            title: \"Custom Module Imports\",\r\n            data: []\r\n        }];\r\n\r\n        // separate dependency modules from NodeJs modules\r\n        dependencies.forEach((value, key) => {\r\n            if (value[0].isNodeModule) {\r\n                nodeModulesData.push({\r\n                    name: key,\r\n                    count: value.length,\r\n                });\r\n            } else {\r\n                dependencyData.push({name: key, count: value.length});\r\n            }\r\n        });\r\n\r\n        // calculate sizes of  dependencies\r\n        const promisesArray = [];\r\n\r\n        dependencyData.forEach(value => {\r\n\r\n            // prepare chart data for [dependency -> imports in files]\r\n            chartData[0].data.push([value.name, value.count]);\r\n\r\n            promisesArray.push(\r\n                getSizes(value.name, {\r\n                    resolve: [nodeModulesPath]\r\n                }).then(data => {\r\n                    /* data = {\r\n                          name: 'react,react-dom',\r\n                          size: 12023, // in bytes\r\n                          minified: 2342,\r\n                          gzipped: 534,\r\n                          versionedName: 'react@16.0.0,react-dom@16.0.0'\r\n                        } */\r\n\r\n                    data[\"sizeOnDisk\"] = convertToKb(getSizeOnDiskRek(path.join(nodeModulesPath, data.name)));\r\n                    data[\"sizeInKB\"] = convertToKb(data.size);\r\n                    data[\"minifiedInKB\"] = convertToKb(data.minified);\r\n                    data[\"gzippedInKB\"] = convertToKb(data.gzipped);\r\n                    value[\"sizeInfo\"] = data;\r\n\r\n                    chartData[1].data.push([value.name, parseFloat(data[\"minifiedInKB\"])]);\r\n                    chartData[2].data.push([value.name, parseFloat(data[\"minifiedInKB\"]) / value.count]);\r\n\r\n                }).catch(err => {\r\n                    // value[\"sizeInfo\"] = {\r\n                    //     sizeOnDisk: convertToKb(getSizeOnDiskRek(path.join(nodeModulesPath, value.name)))\r\n                    // }\r\n                    // console.error(err);\r\n                })\r\n            );\r\n        });\r\n\r\n        // add all not used dependencies from the package.json\r\n        Object.keys(allDependencies).forEach(dependencyName => {\r\n            if (!dependencyData.some(value => value.name === dependencyName)) {\r\n                dependencyData.push({\r\n                    name: dependencyName,\r\n                    count: 0,\r\n                });\r\n            }\r\n        });\r\n\r\n        // sort\r\n        dependencyData.sort((a, b) => b.count - a.count);\r\n        nodeModulesData.sort((a, b) => b.count - a.count);\r\n\r\n        await Promise.all(promisesArray);\r\n\r\n        // add missing size info\r\n        dependencyData.forEach(dependency => {\r\n            if (!dependency.sizeInfo) {\r\n                dependency.sizeInfo = {\r\n                    sizeOnDisk: convertToKb(getSizeOnDiskRek(path.join(nodeModulesPath, dependency.name))),\r\n                    sizeInKB: 0,\r\n                    minifiedInKB: 0,\r\n                    gzippedInKB: 0,\r\n                    sizeInfo: 0\r\n                }\r\n            }\r\n        });\r\n\r\n        chartData[1].data.sort(((a, b) => b[1] - a[1]));\r\n        chartData[2].data.sort(((a, b) => b[1] - a[1]));\r\n\r\n        chartData.forEach(value => {\r\n            value.data.unshift([\"\", \"\"]);\r\n        });\r\n\r\n        // render a set of data\r\n        return compiledFunction({\r\n            title: 'Overview',\r\n            folder: './',\r\n            chartData: chartData,\r\n            dependencies: dependencyData,\r\n            nodeModules: nodeModulesData,\r\n            date: this.date\r\n        });\r\n\r\n        /**\r\n         * Converts the given size as bytes to kilobytes and formats for presentation.\r\n         */\r\n        function convertToKb(x: number): string {\r\n            return (x / 1024).toLocaleString(\"en-US\", {\r\n                minimumFractionDigits: 1,\r\n                maximumFractionDigits: 1\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Recursively loops throw the given directory and returns ins size in bytes.\r\n         */\r\n        function getSizeOnDiskRek(dirPath: string) {\r\n            let size = 0;\r\n            const itemStats = fs.lstatSync(dirPath);\r\n\r\n            if (itemStats.isDirectory()) {\r\n                const allSubs = fs.readdirSync(dirPath);\r\n                {\r\n                    allSubs.forEach(sub => {\r\n                        size += getSizeOnDiskRek(path.join(dirPath, sub));\r\n                    });\r\n                }\r\n            } else {\r\n                size = itemStats.size;\r\n            }\r\n\r\n            return size;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates the content of the modules files.\r\n     */\r\n    private generateModules(dependencyName: string, importCountArray: ImportCount[]): any {\r\n        const compiledFunction = pug.compileFile(path.join(__dirname, HTML_TEMPLATE_FILES.MODULE));\r\n        const slashCount = (dependencyName.match(/\\//g) || []).length;\r\n        const files = this._countService.dependencyAnalyser.filesObject;\r\n\r\n        // Prepare Data\r\n        const convertedData = fillUpData(files, \"details\");\r\n\r\n        // Render a set of data\r\n        return compiledFunction({\r\n            title: 'Module: ' + dependencyName,\r\n            moduleName: dependencyName,\r\n            folder: '../'.repeat(slashCount + 1),\r\n            filesTree: convertedData,// convertedData,\r\n            date: this.date\r\n        });\r\n\r\n        /**\r\n         * Recursively transforms the data for presentation of files.\r\n         */\r\n        function fillUpData(filesObject: any, combinedPath: string): any {\r\n            const dataObj = {};\r\n\r\n            Object.keys(filesObject).forEach((key) => {\r\n                const shortName = path.parse(key).base;\r\n                dataObj[shortName] = {};\r\n\r\n                if (filesObject[key] && filesObject[key].children) {\r\n                    dataObj[shortName].children = fillUpData(filesObject[key].children, path.join(combinedPath, shortName));\r\n                }\r\n\r\n                const usedImport = importCountArray.find(element => element.fileName === key);\r\n                if (usedImport) {\r\n\r\n                    dataObj[shortName].adds = {\r\n                        \"link\": path.join(\"../\".repeat(slashCount + 1), combinedPath, shortName) + \".html?module=\"\r\n                            + dependencyName + \"&imports=\" + usedImport.importDeclaration.getImportSpecifiers().join(\",\"),\r\n                        \"imports\": usedImport.importDeclaration.isEntireModuleImported() ?\r\n                            [\"*\"] : usedImport.importDeclaration.getImportSpecifiers()\r\n                    }\r\n                }\r\n            });\r\n\r\n            return dataObj;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates the content of the code files.\r\n     */\r\n    private generateFileContent(importCounts: ImportCount[], usageCountArray: UsageCount[], shortFileName: string): any {\r\n        const compiledFunction = pug.compileFile(path.join(__dirname, HTML_TEMPLATE_FILES.CODE));\r\n        const formattedContent = importCounts[0].sourceFile.text;\r\n        const lineCount = (formattedContent.match(/\\n/g) || []).length;\r\n        const slashCount = (shortFileName.match(/\\\\/g) || []).length;\r\n        const importsArray = [];\r\n        const usageArray = [];\r\n        const countMap = new Map<string, number>();\r\n        const tempCountArr = [];\r\n        const countArray = [[\"\"], [\"\"]];\r\n\r\n        // prepare data to mark imports\r\n        importCounts.forEach(importCount => {\r\n            importsArray.push({\r\n                moduleSpecifier: importCount.importDeclaration.getModuleSpecifier(),\r\n                importSpecifiers: importCount.importDeclaration.getImportSpecifiers(),\r\n                isEntireModuleImported: importCount.importDeclaration.isEntireModuleImported(),\r\n                lineCount: getLineCountToOccurrence(importCount.importDeclaration.node.end)\r\n            });\r\n        });\r\n\r\n        // prepare data to mark imported stuff, when used\r\n        if (!usageCountArray) usageCountArray = [];\r\n        usageCountArray.forEach(value => {\r\n            const identifier = value.identifier;\r\n            const identifierName = identifier.escapedText.toString();\r\n\r\n            usageArray.push({\r\n                lineCount: getLineCountToOccurrence(identifier.end),\r\n                identifierName: identifierName,\r\n                dependencyName: value.dependencyName\r\n            });\r\n\r\n            // Count the usages for the chart\r\n            countMap.set(identifierName, countMap.get(identifierName) >= 0 ? countMap.get(identifierName) + 1 : 1);\r\n        });\r\n\r\n        countMap.forEach((value, key) => {\r\n            tempCountArr.push([key, value]);\r\n        });\r\n        tempCountArr.sort((a, b) => b[1] - a[1]);\r\n        tempCountArr.forEach(value => {\r\n            countArray[0].push(value[0]);\r\n            // @ts-ignore\r\n            countArray[0].push({role: 'annotation'});\r\n            countArray[1].push(value[1]);\r\n            countArray[1].push(value[1].toString());\r\n        });\r\n\r\n        return compiledFunction({\r\n            title: 'File: ' + shortFileName,\r\n            shortFileName: shortFileName,\r\n            folder: '../'.repeat(slashCount + 1),\r\n            sourceCode: formattedContent,\r\n            lineCount: lineCount + 1,\r\n            importsArray: importsArray,\r\n            usageArray: usageArray,\r\n            countArray: countArray,\r\n            date: this.date\r\n        });\r\n\r\n        /**\r\n         * Counts the lines to the occurrence of the searched node.\r\n         */\r\n        function getLineCountToOccurrence(endPosition: number): number {\r\n            const code = formattedContent.substring(0, endPosition);\r\n            return (code.match(/\\n/g) || []).length + 1;\r\n        }\r\n    }\r\n\r\n}"]}