{"version":3,"file":"countService.js","sourceRoot":"","sources":["../../src/presentation/countService.ts"],"names":[],"mappings":";;AAAA,uDAAkD;AAMlD;;GAEG;AACH,MAAa,YAAY;IAsCrB,YAAY,kBAAsC;QAC9C,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;QACvB,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;QACtB,IAAI,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;QAC7C,IAAI,CAAC,eAAe,GAAG,IAAI,iCAAe,CAAC,IAAI,CAAC,CAAC;IACrD,CAAC;IA1CD,IAAI,YAAY;QACZ,OAAO,IAAI,CAAC,aAAa,CAAC;IAC9B,CAAC;IAED,IAAI,YAAY,CAAC,KAAoB;QACjC,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;IAC/B,CAAC;IAED,IAAI,WAAW;QACX,OAAO,IAAI,CAAC,YAAY,CAAC;IAC7B,CAAC;IAED,IAAI,WAAW,CAAC,KAAmB;QAC/B,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;IAC9B,CAAC;IAED,IAAI,kBAAkB;QAClB,OAAO,IAAI,CAAC,mBAAmB,CAAC;IACpC,CAAC;IAED,IAAI,kBAAkB,CAAC,KAAyB;QAC5C,IAAI,CAAC,mBAAmB,GAAG,KAAK,CAAC;IACrC,CAAC;IAED,IAAI,eAAe;QACf,OAAO,IAAI,CAAC,gBAAgB,CAAC;IACjC,CAAC;IAED,IAAI,eAAe,CAAC,KAAsB;QACtC,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;IAClC,CAAC;IAcD;;OAEG;IACH,cAAc,CAAC,WAAW;QACtB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACxC,CAAC;IAED;;OAEG;IACH,eAAe;QACX,OAAO,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;IAC7C,CAAC;IAED;;OAEG;IACH,qBAAqB;QACjB,OAAO,IAAI,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,CAAC;IACnD,CAAC;IAED;;;OAGG;IACK,gBAAgB,CAAC,QAAgB;QACrC,MAAM,eAAe,GAAG,IAAI,GAAG,EAAyB,CAAC;QAEzD,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;YAC9B,IAAI,gBAAgB,GAAkB,eAAe,CAAC,GAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;YAE3E,IAAI,gBAAgB,EAAE;gBAClB,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aAChC;iBAAM;gBACH,gBAAgB,GAAG,CAAC,KAAK,CAAC,CAAC;gBAC3B,eAAe,CAAC,GAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,gBAAgB,CAAC,CAAC;aAC1D;QACL,CAAC,CAAC,CAAC;QAEH,OAAO,eAAe,CAAC;IAC3B,CAAC;IAED;;OAEG;IACH,aAAa,CAAC,UAAsB;QAChC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IACtC,CAAC;IAED;;OAEG;IACH,oBAAoB;QAChB,MAAM,aAAa,GAAG,IAAI,GAAG,EAAwB,CAAC;QAEtD,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;YAC7B,IAAI,eAAe,GAAiB,aAAa,CAAC,GAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;YAEtE,IAAI,eAAe,EAAE;gBACjB,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aAC/B;iBAAM;gBACH,eAAe,GAAG,CAAC,KAAK,CAAC,CAAC;gBAC1B,aAAa,CAAC,GAAG,CAAC,KAAK,CAAC,QAAQ,EAAE,eAAe,CAAC,CAAC;aACtD;QACL,CAAC,CAAC,CAAA;QAEF,OAAO,aAAa,CAAC;IACzB,CAAC;CACJ;AAjHD,oCAiHC","sourcesContent":["import {OutputGenerator} from \"./outputGenerator\";\r\nimport {DependencyAnalyser} from \"../main/dependencyAnalyser\";\r\nimport {Options} from \"../index\";\r\nimport {ImportCount} from \"./importCount\";\r\nimport {UsageCount} from \"./usageCount\";\r\n\r\n/**\r\n * Handles and contains all counts.\r\n */\r\nexport class CountService {\r\n    get importCounts(): ImportCount[] {\r\n        return this._importCounts;\r\n    }\r\n\r\n    set importCounts(value: ImportCount[]) {\r\n        this._importCounts = value;\r\n    }\r\n\r\n    get usageCounts(): UsageCount[] {\r\n        return this._usageCounts;\r\n    }\r\n\r\n    set usageCounts(value: UsageCount[]) {\r\n        this._usageCounts = value;\r\n    }\r\n\r\n    get dependencyAnalyser(): DependencyAnalyser {\r\n        return this._dependencyAnalyser;\r\n    }\r\n\r\n    set dependencyAnalyser(value: DependencyAnalyser) {\r\n        this._dependencyAnalyser = value;\r\n    }\r\n\r\n    get outputGenerator(): OutputGenerator {\r\n        return this._outputGenerator;\r\n    }\r\n\r\n    set outputGenerator(value: OutputGenerator) {\r\n        this._outputGenerator = value;\r\n    }\r\n\r\n    private _importCounts: ImportCount[];\r\n    private _usageCounts: UsageCount[];\r\n    private _dependencyAnalyser: DependencyAnalyser;\r\n    private _outputGenerator: OutputGenerator;\r\n\r\n    constructor(dependencyAnalyser: DependencyAnalyser) {\r\n        this.importCounts = [];\r\n        this.usageCounts = [];\r\n        this.dependencyAnalyser = dependencyAnalyser;\r\n        this.outputGenerator = new OutputGenerator(this);\r\n    }\r\n\r\n    /**\r\n     * Adds a UsageCount to the array.\r\n     */\r\n    addImportCount(importCount) {\r\n        this.importCounts.push(importCount);\r\n    }\r\n\r\n    /**\r\n     * Returns a map of ImportCounts grouped by file name as key.\r\n     */\r\n    groupByFileName(): Map<string, ImportCount[]> {\r\n        return this._groupByProperty(\"fileName\");\r\n    }\r\n\r\n    /**\r\n     * Returns a map of ImportCounts grouped by module name as key.\r\n     */\r\n    groupByDependencyName(): Map<string, ImportCount[]> {\r\n        return this._groupByProperty(\"dependencyName\");\r\n    }\r\n\r\n    /**\r\n     * Generic logic for grouping of ImportCounts by given property.\r\n     * @private\r\n     */\r\n    private _groupByProperty(property: string) {\r\n        const importCountsMap = new Map<string, ImportCount[]>();\r\n\r\n        this.importCounts.forEach(value => {\r\n            let importCountArray: ImportCount[] = importCountsMap.get(value[property]);\r\n\r\n            if (importCountArray) {\r\n                importCountArray.push(value);\r\n            } else {\r\n                importCountArray = [value];\r\n                importCountsMap.set(value[property], importCountArray);\r\n            }\r\n        });\r\n\r\n        return importCountsMap;\r\n    }\r\n\r\n    /**\r\n     * Adds a UsageCount to the array.\r\n     */\r\n    addUsageCount(usageCount: UsageCount) {\r\n        this.usageCounts.push(usageCount);\r\n    }\r\n\r\n    /**\r\n     * Returns a map of UsageCounts grouped by file name as key.\r\n     */\r\n    groupUsageByFileName(): Map<string, UsageCount[]> {\r\n        const usageCountMap = new Map<string, UsageCount[]>();\r\n\r\n        this.usageCounts.forEach(value => {\r\n            let usageCountArray: UsageCount[] = usageCountMap.get(value.fileName);\r\n\r\n            if (usageCountArray) {\r\n                usageCountArray.push(value);\r\n            } else {\r\n                usageCountArray = [value];\r\n                usageCountMap.set(value.fileName, usageCountArray);\r\n            }\r\n        })\r\n\r\n        return usageCountMap;\r\n    }\r\n}"]}